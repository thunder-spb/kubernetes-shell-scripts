#!/bin/bash

# Helper function to display usage
usage() {
    echo "Usage: $0 <resource-type> <resource-name> [-c|--context <context>] [-n|--namespace <namespace>] [-l|--selector <label-selector>] [-h|--help] [-d|--debug]"
    echo ""
    echo "Options:"
    echo "  resource-type               (Required) Type of the Kubernetes resource (e.g., pods, services)"
    echo "  resource-name               (Required) Name of the Kubernetes resource"
    echo "  -c, --context <context>     (Optional) Kubernetes context to use"
    echo "  -n, --namespace <namespace> (Optional) Namespace where the resource resides"
    echo "  -l, --selector <label-selector> (Optional) Label selector to filter resources"
    echo "  -h, --help                  Display this help message"
    echo "  -d, --debug                 Enable debug mode"
}

POSITIONAL_ARGS=()

# Parse arguments
RESOURCE_TYPE="all"
RESOURCE_NAME=""
CONTEXT=""
NAMESPACE=""
LABEL_SELECTOR=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--context)
          CONTEXT="$2"
          shift
          shift
          ;;
        -n|--namespace)
          NAMESPACE="$2"
          shift
          shift
          ;;
        -l|--selector)
          LABEL_SELECTOR="$2"
          shift
          shift
          ;;
        -h|--help)
          usage
          shift
          exit 0
          ;;
        -d|--debug)
          set -x
          shift
          ;;
        -*)
          echo "Unknown option $1"
          usage
          exit 1
          ;;
        *)
          POSITIONAL_ARGS+=("$1") # save positional arg
          shift # past argument
          ;;
    esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

RESOURCE_TYPE=$(echo "$1" | tr '[:upper:]' '[:lower:]')
RESOURCE_NAME=$(echo "$2" | tr '[:upper:]' '[:lower:]')

if [[ -z "$RESOURCE_TYPE" ]] || [[ -z "$RESOURCE_NAME" ]]; then
  usage
fi

# Build kubectl command with optional arguments
KUBECTL_CMD="kubectl"
[[ -n "$CONTEXT" ]] && KUBECTL_CMD="$KUBECTL_CMD --context=$CONTEXT"
[[ -n "$NAMESPACE" ]] && KUBECTL_CMD="$KUBECTL_CMD --namespace=$NAMESPACE"
[[ -n "$LABEL_SELECTOR" ]] && KUBECTL_CMD="$KUBECTL_CMD --selector=$LABEL_SELECTOR"

${KUBECTL_CMD} patch ${RESOURCE_TYPE} ${RESOURCE_NAME} -p '{"metadata": {"finalizers": null}}' --type=merge


