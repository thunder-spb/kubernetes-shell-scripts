#!/bin/bash

# Helper function to display usage
usage() {
    echo "Usage: $0 [secret-name] [-c|--context <context>] [-n|--namespace <namespace>] [-l|--selector <label-selector>] [-k|--key <data-key>] [-d|--data-only] [-i|--interactive] [-o|--output <format>] [-h|--help]"
    echo ""
    echo "Options:"
    echo "  secret-name                 (Optional) Name of the Kubernetes secret. If not provided, lists all secrets"
    echo "  -c, --context <context>     (Optional) Kubernetes context to use"
    echo "  -n, --namespace <namespace> (Optional) Namespace where the secret resides"
    echo "  -l, --selector <label-selector> (Optional) Label selector to filter secrets"
    echo "  -k, --key <data-key>        (Optional) Specific key in the secret's data to decode (only valid with secret-name)"
    echo "  -d, --data-only             (Optional) Output only the data section of the secret"
    echo "  -o, --output <format>       (Optional) Output format, either 'yaml' or 'json'"
    echo "  -h, --help                  Display this help message"
    exit 1
}

POSITIONAL_ARGS=()

# Parse arguments
SECRET_NAME=""
CONTEXT=""
NAMESPACE=""
LABEL_SELECTOR=""
DATA_KEY=""
DATA_ONLY=false
OUTPUT_FORMAT="yaml"

while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--context)
          CONTEXT="$2"
          shift
          shift
          ;;
        -n|--namespace)
          NAMESPACE="$2"
          shift
          shift
          ;;
        -l|--selector)
          LABEL_SELECTOR="$2"
          shift
          shift
          ;;
        -k|--key)
          DATA_KEY="$2"
          shift
          shift
          ;;
        -h|--help)
          usage
          shift
          exit 0
          ;;
        -d|--data-only)
          DATA_ONLY=true
          shift
          ;;
        -o|--output)
          OUTPUT_FORMAT="$2"
          shift
          shift
          ;;
        -*|--*)
          echo "Unknown option $1"
          usage
          exit 1
          ;;
        *)
          POSITIONAL_ARGS+=("$1") # save positional arg
          shift # past argument
          ;;
    esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

# Validate output format
if [[ "$OUTPUT_FORMAT" != "yaml" && "$OUTPUT_FORMAT" != "json" ]]; then
  echo "Error: Output format must be 'yaml' or 'json'"
  exit 1
fi

SECRET_NAME=$1

# Build kubectl command with optional arguments
KUBECTL_CMD="kubectl"
[[ -n "$CONTEXT" ]] && KUBECTL_CMD="$KUBECTL_CMD --context=$CONTEXT"
[[ -n "$NAMESPACE" ]] && KUBECTL_CMD="$KUBECTL_CMD --namespace=$NAMESPACE"
[[ -n "$LABEL_SELECTOR" ]] && KUBECTL_CMD="$KUBECTL_CMD --selector=$LABEL_SELECTOR"

if [[ -z "$SECRET_NAME" ]]; then
  $KUBECTL_CMD get secret
  exit 0
fi

# Fetch the secret and decode its data
SECRET_JSON=$($KUBECTL_CMD get secret "$SECRET_NAME" -o json 2>/dev/null)

# Check if the secret exists
if [[ $? -ne 0 ]]; then
    echo "Error: Secret '$SECRET_NAME' not found."
    exit 1
fi

DECODED_DATA=$(echo "$SECRET_JSON" | jq --arg key "$DATA_KEY" --argjson data_only "$([[ "$DATA_ONLY" == "true" ]] && echo true || echo false)" '
  def decode_data(data; key):
    if key == "" then
      data | with_entries(.value |= @base64d)
    else
      if data[key] then { (key): (data[key] | @base64d) }
      else error("Key \($key) not found in secret")
      end
    end;

  .data = decode_data(.data; $key)
  | if $data_only then .data
    else {
      apiVersion,
      kind,
      type,
      metadata,
      data: .data
    }
  end
')

# Output the result as JSON or YAML
if [[ $OUTPUT_FORMAT == "json" ]]; then
    echo "$DECODED_DATA" | jq -r
else
    echo "$DECODED_DATA" | yq eval -P
fi

